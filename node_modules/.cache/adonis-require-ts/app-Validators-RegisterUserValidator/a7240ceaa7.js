"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Validator_1 = global[Symbol.for('ioc.use')]("Adonis/Core/Validator");
class RegisterUserValidator {
    constructor(ctx) {
        this.ctx = ctx;
        this.schema = Validator_1.schema.create({
            name: Validator_1.schema.string({}, [
                Validator_1.rules.required()
            ]),
            email: Validator_1.schema.string({}, [
                Validator_1.rules.required(),
                Validator_1.rules.email(),
                Validator_1.rules.unique({ table: 'users', column: 'email' })
            ]),
            password: Validator_1.schema.string({}, [
                Validator_1.rules.required(),
                Validator_1.rules.minLength(4)
            ])
        });
        this.messages = {
            required: "O {{field}} é obrigatório para se registrar!",
            'email.unique': "E-mail já cadastrado!",
            'mineLength': "Tamanho de senha inválidas"
        };
    }
}
exports.default = RegisterUserValidator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVnaXN0ZXJVc2VyVmFsaWRhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiUmVnaXN0ZXJVc2VyVmFsaWRhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMkVBQTBFO0FBRzFFLE1BQXFCLHFCQUFxQjtJQUN4QyxZQUFzQixHQUF3QjtRQUF4QixRQUFHLEdBQUgsR0FBRyxDQUFxQjtRQXFCdkMsV0FBTSxHQUFHLGtCQUFNLENBQUMsTUFBTSxDQUFDO1lBQzVCLElBQUksRUFBRSxrQkFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUM7Z0JBQ3JCLGlCQUFLLENBQUMsUUFBUSxFQUFFO2FBQ2pCLENBQUM7WUFDRixLQUFLLEVBQUUsa0JBQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFO2dCQUN2QixpQkFBSyxDQUFDLFFBQVEsRUFBRTtnQkFDaEIsaUJBQUssQ0FBQyxLQUFLLEVBQUU7Z0JBQ2IsaUJBQUssQ0FBQyxNQUFNLENBQUMsRUFBQyxLQUFLLEVBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUMsQ0FBQzthQUMvQyxDQUFDO1lBQ0YsUUFBUSxFQUFFLGtCQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBQztnQkFDekIsaUJBQUssQ0FBQyxRQUFRLEVBQUU7Z0JBQ2hCLGlCQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQzthQUNuQixDQUFDO1NBQ0gsQ0FBQyxDQUFBO1FBYUssYUFBUSxHQUFtQjtZQUNoQyxRQUFRLEVBQUUsOENBQThDO1lBQ3hELGNBQWMsRUFBRSx1QkFBdUI7WUFDdkMsWUFBWSxFQUFFLDRCQUE0QjtTQUUzQyxDQUFBO0lBcERnRCxDQUFDO0NBcURuRDtBQXRERCx3Q0FzREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzY2hlbWEsIEN1c3RvbU1lc3NhZ2VzLCBydWxlcyB9IGZyb20gJ0Bpb2M6QWRvbmlzL0NvcmUvVmFsaWRhdG9yJ1xuaW1wb3J0IHR5cGUgeyBIdHRwQ29udGV4dENvbnRyYWN0IH0gZnJvbSAnQGlvYzpBZG9uaXMvQ29yZS9IdHRwQ29udGV4dCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVnaXN0ZXJVc2VyVmFsaWRhdG9yIHtcbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGN0eDogSHR0cENvbnRleHRDb250cmFjdCkge31cblxuICAvKlxuICAgKiBEZWZpbmUgc2NoZW1hIHRvIHZhbGlkYXRlIHRoZSBcInNoYXBlXCIsIFwidHlwZVwiLCBcImZvcm1hdHRpbmdcIiBhbmQgXCJpbnRlZ3JpdHlcIiBvZiBkYXRhLlxuICAgKlxuICAgKiBGb3IgZXhhbXBsZTpcbiAgICogMS4gVGhlIHVzZXJuYW1lIG11c3QgYmUgb2YgZGF0YSB0eXBlIHN0cmluZy4gQnV0IHRoZW4gYWxzbywgaXQgc2hvdWxkXG4gICAqICAgIG5vdCBjb250YWluIHNwZWNpYWwgY2hhcmFjdGVycyBvciBudW1iZXJzLlxuICAgKiAgICBgYGBcbiAgICogICAgIHNjaGVtYS5zdHJpbmcoe30sIFsgcnVsZXMuYWxwaGEoKSBdKVxuICAgKiAgICBgYGBcbiAgICpcbiAgICogMi4gVGhlIGVtYWlsIG11c3QgYmUgb2YgZGF0YSB0eXBlIHN0cmluZywgZm9ybWF0dGVkIGFzIGEgdmFsaWRcbiAgICogICAgZW1haWwuIEJ1dCBhbHNvLCBub3QgdXNlZCBieSBhbnkgb3RoZXIgdXNlci5cbiAgICogICAgYGBgXG4gICAqICAgICBzY2hlbWEuc3RyaW5nKHt9LCBbXG4gICAqICAgICAgIHJ1bGVzLmVtYWlsKCksXG4gICAqICAgICAgIHJ1bGVzLnVuaXF1ZSh7IHRhYmxlOiAndXNlcnMnLCBjb2x1bW46ICdlbWFpbCcgfSksXG4gICAqICAgICBdKVxuICAgKiAgICBgYGBcbiAgICovXG4gIHB1YmxpYyBzY2hlbWEgPSBzY2hlbWEuY3JlYXRlKHtcbiAgICBuYW1lOiBzY2hlbWEuc3RyaW5nKHt9LFtcbiAgICAgIHJ1bGVzLnJlcXVpcmVkKClcbiAgICBdKSxcbiAgICBlbWFpbDogc2NoZW1hLnN0cmluZyh7fSwgW1xuICAgICAgcnVsZXMucmVxdWlyZWQoKSxcbiAgICAgIHJ1bGVzLmVtYWlsKCksXG4gICAgICBydWxlcy51bmlxdWUoe3RhYmxlOid1c2VycycsIGNvbHVtbjogJ2VtYWlsJ30pXG4gICAgXSksXG4gICAgcGFzc3dvcmQ6IHNjaGVtYS5zdHJpbmcoe30sW1xuICAgICAgcnVsZXMucmVxdWlyZWQoKSxcbiAgICAgIHJ1bGVzLm1pbkxlbmd0aCg0KVxuICAgIF0pXG4gIH0pXG5cbiAgLyoqXG4gICAqIEN1c3RvbSBtZXNzYWdlcyBmb3IgdmFsaWRhdGlvbiBmYWlsdXJlcy4gWW91IGNhbiBtYWtlIHVzZSBvZiBkb3Qgbm90YXRpb24gYCguKWBcbiAgICogZm9yIHRhcmdldGluZyBuZXN0ZWQgZmllbGRzIGFuZCBhcnJheSBleHByZXNzaW9ucyBgKCopYCBmb3IgdGFyZ2V0aW5nIGFsbFxuICAgKiBjaGlsZHJlbiBvZiBhbiBhcnJheS4gRm9yIGV4YW1wbGU6XG4gICAqXG4gICAqIHtcbiAgICogICAncHJvZmlsZS51c2VybmFtZS5yZXF1aXJlZCc6ICdVc2VybmFtZSBpcyByZXF1aXJlZCcsXG4gICAqICAgJ3Njb3Jlcy4qLm51bWJlcic6ICdEZWZpbmUgc2NvcmVzIGFzIHZhbGlkIG51bWJlcnMnXG4gICAqIH1cbiAgICpcbiAgICovXG4gIHB1YmxpYyBtZXNzYWdlczogQ3VzdG9tTWVzc2FnZXMgPSB7XG4gICAgcmVxdWlyZWQ6IFwiTyB7e2ZpZWxkfX0gw6kgb2JyaWdhdMOzcmlvIHBhcmEgc2UgcmVnaXN0cmFyIVwiLFxuICAgICdlbWFpbC51bmlxdWUnOiBcIkUtbWFpbCBqw6EgY2FkYXN0cmFkbyFcIixcbiAgICAnbWluZUxlbmd0aCc6IFwiVGFtYW5obyBkZSBzZW5oYSBpbnbDoWxpZGFzXCJcblxuICB9XG59XG4iXX0=