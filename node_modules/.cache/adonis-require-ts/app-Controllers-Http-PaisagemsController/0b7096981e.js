"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Paisagem_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Paisagem"));
const PaisagemValidator_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Validators/PaisagemValidator"));
class PaisagemsController {
    async index({}) {
        const topic = await Paisagem_1.default.all();
        return topic;
    }
    async store({ request }) {
        const data = await request.validate(PaisagemValidator_1.default);
        const topic = await Paisagem_1.default.create({ ...data });
        return topic;
    }
    async show({ params, response }) {
        try {
            const topic = await Paisagem_1.default.findOrFail(params.id);
            return topic;
        }
        catch (error) {
            response.status(400).send("Mensagem não encontrada!!!");
        }
    }
    async update({ request, params, response }) {
        const { foto, nome, local } = await request.validate(PaisagemValidator_1.default);
        try {
            const topic = await Paisagem_1.default.findOrFail(params.id);
            topic.foto = foto;
            topic.nome = nome;
            topic.local = local;
            await topic.save();
            return topic;
        }
        catch (error) {
            response.status(400).send("Mensagem não encontrada!!!");
        }
    }
    async destroy({ params, response }) {
        try {
            const paisagem = await Paisagem_1.default.findOrFail(params.id);
            await paisagem.delete();
            return paisagem;
        }
        catch (error) {
            response.status(400).send("Mensagem não encontrada!!!");
        }
    }
}
exports.default = PaisagemsController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGFpc2FnZW1zQ29udHJvbGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlBhaXNhZ2Vtc0NvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSx5RkFBMkM7QUFDM0MsK0dBQWdFO0FBRWhFLE1BQXFCLG1CQUFtQjtJQUNqQyxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQXdCO1FBQ3ZDLE1BQU0sS0FBSyxHQUFHLE1BQU0sa0JBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtRQUNsQyxPQUFPLEtBQUssQ0FBQTtJQUNkLENBQUM7SUFFTSxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUUsT0FBTyxFQUFzQjtRQUNoRCxNQUFNLElBQUksR0FBRyxNQUFNLE9BQU8sQ0FBQyxRQUFRLENBQUMsMkJBQWlCLENBQUMsQ0FBQTtRQUN0RCxNQUFNLEtBQUssR0FBRyxNQUFNLGtCQUFRLENBQUMsTUFBTSxDQUFDLEVBQUUsR0FBRyxJQUFJLEVBQUUsQ0FBQyxDQUFBO1FBQ2hELE9BQU8sS0FBSyxDQUFBO0lBQ2QsQ0FBQztJQUVNLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUF1QjtRQUN6RCxJQUFJO1lBQ0YsTUFBTSxLQUFLLEdBQUcsTUFBTSxrQkFBUSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUE7WUFDbEQsT0FBTyxLQUFLLENBQUE7U0FDYjtRQUFDLE9BQU8sS0FBSyxFQUFFO1lBQ2QsUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsNEJBQTRCLENBQUMsQ0FBQTtTQUN4RDtJQUNILENBQUM7SUFFTSxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQXVCO1FBQ3BFLE1BQU0sRUFBRSxJQUFJLEVBQUMsSUFBSSxFQUFDLEtBQUssRUFBRSxHQUFHLE1BQU0sT0FBTyxDQUFDLFFBQVEsQ0FBQywyQkFBaUIsQ0FBQyxDQUFBO1FBQ3JFLElBQUk7WUFDRixNQUFNLEtBQUssR0FBRyxNQUFNLGtCQUFRLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQTtZQUNsRCxLQUFLLENBQUMsSUFBSSxHQUFFLElBQUksQ0FBQTtZQUNoQixLQUFLLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQTtZQUNqQixLQUFLLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQTtZQUNuQixNQUFNLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQTtZQUNsQixPQUFPLEtBQUssQ0FBQTtTQUViO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDZCxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxDQUFBO1NBQ3hEO0lBQ0gsQ0FBQztJQUVNLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUF1QjtRQUM1RCxJQUFJO1lBQ0YsTUFBTSxRQUFRLEdBQUcsTUFBTSxrQkFBUSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUE7WUFDckQsTUFBTSxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUE7WUFDdkIsT0FBTyxRQUFRLENBQUE7U0FDaEI7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNkLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLDRCQUE0QixDQUFDLENBQUE7U0FDeEQ7SUFDSCxDQUFDO0NBQ0Y7QUE3Q0Qsc0NBNkNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBIdHRwQ29udGV4dENvbnRyYWN0IH0gZnJvbSBcIkBpb2M6QWRvbmlzL0NvcmUvSHR0cENvbnRleHRcIjtcbmltcG9ydCBQYWlzYWdlbSBmcm9tIFwiQXBwL01vZGVscy9QYWlzYWdlbVwiO1xuaW1wb3J0IFBhaXNhZ2VtVmFsaWRhdG9yIGZyb20gJ0FwcC9WYWxpZGF0b3JzL1BhaXNhZ2VtVmFsaWRhdG9yJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYWlzYWdlbXNDb250cm9sbGVyIHtcbnB1YmxpYyBhc3luYyBpbmRleCh7IH06IEh0dHBDb250ZXh0Q29udHJhY3QpIHtcbiAgICBjb25zdCB0b3BpYyA9IGF3YWl0IFBhaXNhZ2VtLmFsbCgpXG4gICAgcmV0dXJuIHRvcGljXG4gIH1cblxuICBwdWJsaWMgYXN5bmMgc3RvcmUoeyByZXF1ZXN0fTogSHR0cENvbnRleHRDb250cmFjdCkge1xuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXF1ZXN0LnZhbGlkYXRlKFBhaXNhZ2VtVmFsaWRhdG9yKVxuICAgIGNvbnN0IHRvcGljID0gYXdhaXQgUGFpc2FnZW0uY3JlYXRlKHsgLi4uZGF0YSB9KVxuICAgIHJldHVybiB0b3BpY1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHNob3coeyBwYXJhbXMsIHJlc3BvbnNlIH06IEh0dHBDb250ZXh0Q29udHJhY3QpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgdG9waWMgPSBhd2FpdCBQYWlzYWdlbS5maW5kT3JGYWlsKHBhcmFtcy5pZClcbiAgICAgIHJldHVybiB0b3BpY1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXNwb25zZS5zdGF0dXMoNDAwKS5zZW5kKFwiTWVuc2FnZW0gbsOjbyBlbmNvbnRyYWRhISEhXCIpXG4gICAgfVxuICB9XG5cbiAgcHVibGljIGFzeW5jIHVwZGF0ZSh7IHJlcXVlc3QsIHBhcmFtcywgcmVzcG9uc2UgfTogSHR0cENvbnRleHRDb250cmFjdCkge1xuICAgIGNvbnN0IHsgZm90byxub21lLGxvY2FsIH0gPSBhd2FpdCByZXF1ZXN0LnZhbGlkYXRlKFBhaXNhZ2VtVmFsaWRhdG9yKVxuICAgIHRyeSB7XG4gICAgICBjb25zdCB0b3BpYyA9IGF3YWl0IFBhaXNhZ2VtLmZpbmRPckZhaWwocGFyYW1zLmlkKVxuICAgICAgdG9waWMuZm90bz0gZm90b1xuICAgICAgdG9waWMubm9tZSA9IG5vbWVcbiAgICAgIHRvcGljLmxvY2FsID0gbG9jYWxcbiAgICAgIGF3YWl0IHRvcGljLnNhdmUoKVxuICAgICAgcmV0dXJuIHRvcGljXG5cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmVzcG9uc2Uuc3RhdHVzKDQwMCkuc2VuZChcIk1lbnNhZ2VtIG7Do28gZW5jb250cmFkYSEhIVwiKVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBkZXN0cm95KHsgcGFyYW1zLCByZXNwb25zZSB9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHBhaXNhZ2VtID0gYXdhaXQgUGFpc2FnZW0uZmluZE9yRmFpbChwYXJhbXMuaWQpXG4gICAgICBhd2FpdCBwYWlzYWdlbS5kZWxldGUoKVxuICAgICAgcmV0dXJuIHBhaXNhZ2VtXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJlc3BvbnNlLnN0YXR1cyg0MDApLnNlbmQoXCJNZW5zYWdlbSBuw6NvIGVuY29udHJhZGEhISFcIilcbiAgICB9XG4gIH1cbn1cbiJdfQ==